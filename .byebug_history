c
q!
n
 body.instance_variable_get(:@response).instance_variable_get(:@header)["Location"]
 body.instance_variable_get(:@response)
uri
body
body.instance_variable_get(:@header)["Location"]
body.instance_variable_get(:@body)
body.instance_variable_get(:@body).instance_variable_get(:@header)
body.instance_variable_get(:@body).instance_variable_get(:@header)["Location"]
c
q!
body.instance_variable_get(:@response).instance_variable_get(:@request).env['action_controller.instance']
body.instance_variable_get(:@response).instance_variable_get(:@request).env
body.instance_variable_get(:@response).instance_variable_get(:@request)
body.instance_variable_get(:@response)
body.instance_variable_get(:@request)
body.instance_variable_get('request')
body.instance_variable_get('@request')
body.instance_variable_get('@request=')
body.instance_variable_get('@request')
body.instance_variable_get('request')
body
body.request
body
c
n
@mega_instance
n
c
body
headers
status
status, headers, body = controller_class.action(:index).call(get_env(env_index))
get_env(env_index)
env_index
status, headers, body = controller_class.action(:index).call(get_env(env_index))
request.env['action_controller.instance']
request.envenv['action_controller.instance']
request.env
request.action_controller
request.env.action_controller
request.env['action_controller.instance']
request.env
request
env
body.env
c
q!
controller_class
model_class.order(id: :desc)
model_class.order
model_class
body.request
body
body.request.env['action_controller.instance']
c
n
c
q!
c
exitc
exit
n
MegaBar::Block.all.size
c
MegaBar::Block.all.size
n
tmp.reload
n
tmp
n
c
n
c
n
cn
c
MegaBar::Block.all.size
c
self.make_page = 'y'
finish
obj
finish
f
n
 n
m
c
self.make_page = 'y'
c
v
self.make_page = 'y'
self.make_page = y
self.make_page.nil?
self.make_page.nil
c
self
self.make_page
self.make_page.nil?
!self.make_page.nil?
!self.make_page.nil? && !self.make_page.blank?
c!self.make_page.nil? && !self.make_page.blank?
c
n
c
env
n
s
c
e
n
exception
n
create(:template)
n
c
exit
n
exit
MegaBar::Block.all.size
MegaBar::Block
args
blck
MegaEnv.new(blck, args[:rout], args[:page], []).to_hash
c
create(:model_with_page, classname: 'Textbox', tablename: 'mega_bar_textboxes', name: 'Textboxes')
ccreate(:model_with_page, classname: 'Textbox', tablename: 'mega_bar_textboxes', name: 'Textboxes')
n
c
MegaBar::TmpField.first
c
n
c
q!
MegaBar::TmpField.first
MegaBar::TmpField.create!([   {id: 1, model_id: 1, schema: "sqlite", tablename: "mega_bar_models", field: "id", data_type: nil, accessor: "", default_value: "", default_data_format: "off", default_data_format_edit: "textread", created_at: "2014-05-05 17:31:12", updated_at: "2015-02-08 07:32:31", option_borrow: nil, filter_type: nil, tool_tip: nil, instructions: nil}])
MegaBar::TmpField.create!([   {id: 1, model_id: 1, schema: "sqlite", tablename: "mega_bar_models", field: "id", data_type: nil, accessor: "", default_value: "", default_data_format: "off", default_data_format_edit: "textread",  default_show_wrapper: nil, created_at: "2014-05-05 17:31:12", updated_at: "2015-02-08 07:32:31", option_borrow: nil, filter_type: nil, tool_tip: nil, instructions: nil}])
MegaBar::TmpField.create!([   {id: 1, model_id: 1, schema: "sqlite", tablename: "mega_bar_models", field: "id", data_type: nil, accessor: "", default_value: "", default_data_format: "off", default_data_format_edit: "textread", default_index_wrapper: nil, default_show_wrapper: nil, created_at: "2014-05-05 17:31:12", updated_at: "2015-02-08 07:32:31", option_borrow: nil, filter_type: nil, tool_tip: nil, instructions: nil}])
c
q!
c
q!
c
q!
c
q!
bob.make_page_for_model
bob = MegaBar::Model.new
MegaBar::Model.new
MegaBar::Model
n
MegaBar::Model.methods
MegaBar::Model.make_page_for_model
MegaBar::Model
c
q!
c
n
c
n
factory :model, class: MegaBar::Model do id {1} classname {'Model'} schema  {'deeper'} tablename {'mega_bar_models'} name {'Models'} default_sort_field {'id'} modyule {'MegaBar'} default_sort_order {'desc'} end
c
q
c
q!
c
q!
c
MegaBar::Checkbox
c
q!
c
cc
c
n
q!
n
exit
MegaBar.class
MegaBar
MegaBar::Site
MegaBar::Model
Megabar::Model
n
c
q!
c
n
c
n
q!
exception
n
c
q!
exception
n
q
c
q!
c
q!
c
q!
exception
n
q
c
q
c
q!
Combustion.initialize! :all
n
q!
n
Rails.application.initialized?
c
n
Rails.application.initialize! unless Rails.application.initialized?
Rails.application.initialized?
Rails.application.initialize!
c
n
c
n
c
exit
n
exit
ex
n
c
q
c
q
c
n
   55:       end
/Users/bagus/.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/railties-6.1.0/lib/rails/initializable.rb
n
s
n
s
c
q!
exception
n
c
exception
n
initializers.size
initializers
n
s
