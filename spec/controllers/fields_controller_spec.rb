module MegaBar
  require 'spec_helper'
  require_relative 'common'
  # This spec was generated by rspec-rails when you ran the scaffold generator.
  # It demonstrates how one might use RSpec to specify the controller code that
  # was generated by Rails when you ran the scaffold generator.
  #
  # It assumes that the implementation code is generated by the rails scaffold
  # generator.  If you are using any extension libraries to generate different
  # controller code, this generated spec may or may not pass.
  #
  # It only uses APIs available in rails and/or rspec-rails.  There are a number
  # of tools you can use to make these specs even more expressive, but we're
  # sticking to rails and rspec-rails APIs to keep things simple and stable.
  #
  # Compared to earlier versions of this generator, there is very limited use of
  # stubs and message expectations in this spec.  Stubs are only used when there
  # is no simpler way to get a handle on the object needed for the example.
  # Message expectations are only used when there is no simpler way to specify
  # that an instance is receiving a specific message.

  RSpec.describe MegaBar::FieldsController, :type => :controller do

    include_context "common" #pretty important!

    let(:valid_session) { {} }
    let(:uri) { '/mega-bar/fields' }
    let(:controlller) { 'mega_bar/fields' }
    let(:page_terms) { ['mega-bar', 'fields'] }
    let(:page_name) { 'Fields Page' }

    let(:model) {
      create(
        :model_with_page,
         classname: 'Field',
         tablename: 'mega_bar_fields',
         name: 'Fields'
      )
    }
    let(:field) {
      create(:field)
    }
    let(:valid_attributes) {
      f = build(:field, tablename: 'fields', field: 'tablename')
      { tablename: f[:tablename], field: f[:field], model_id: f[:model_id], id: f[:id]  }
    }

    let(:invalid_attributes) {
      f = build(:field)
      { tablename: nil, field: nil, model_id: nil, id: f[:id]  }
    }

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ModelsController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    context 'with mega_env' do
      before(:each) do
        MegaBar::Field.skip_callback("create",:after, :make_migration)
        MegaBar::Model.skip_callback("create",:after, :make_all_files)
        MegaBar::Model.set_callback("create", :after, :make_page_for_model)
        MegaBar::Page.set_callback("create", :after, :create_layout_for_page)
        MegaBar::Layout.set_callback("create", :after, :create_block_for_layout)
        MegaBar::Block.set_callback("create", :after, :make_model_displays)
        model
        byebug
        # fields
        model_display_format
        model_display_format_2
      end
      after(:each) do
        MegaBar::Field.set_callback("create",:after,:make_migration)
        MegaBar::Model.set_callback("create",:after,:make_all_files)
        MegaBar::Model.destroy_all
        MegaBar::Page.destroy_all
        MegaBar::ModelDisplayFormat.destroy_all
      end

      context 'with callbacks disabled' do
        before(:each) do
          MegaBar::Field.skip_callback("save",:after,:make_field_displays)
          MegaBar::Field.skip_callback("create",:after,:make_field_displays)
          MegaBar::Model.skip_callback("create",:after,:make_page_for_model)
        end
        after(:each) do
          MegaBar::Field.set_callback("save",:after,:make_field_displays)
          MegaBar::Field.set_callback("create",:after,:make_field_displays)
          MegaBar::Model.set_callback("create",:after,:make_page_for_model)

        end

        context "with a field " do
          before(:each) do
            field
          end
          after(:each) do
            # Model.find(1).destroy
            Field.destroy_all
          end
          describe "GET index" do
            it "assigns all fields as @mega_instance", focus: true do
              status, headers, body = MegaBar::FieldsController.action(:index).call(get_env(env_index))
              @controller = body.request.env['action_controller.instance']
              expect(assigns(:mega_instance)).to eq([field])
            end
          end

          describe "GET show" do
            it "assigns the requested field as @mega_instance" do
              field = Field.create! valid_attributes
              get :show, {use_route: :mega_bar, model_id: 1, :id => field.to_param}, valid_session
              expect(assigns(:mega_instance)).to eq([field])
            end
          end
          describe "GET new" do
            it "assigns a new field as @mega_instance" do
              get :new, {use_route: :mega_bar, model_id: 1}, valid_session
              expect(assigns(:mega_instance)).to be_a_new(Field)
            end
          end

          describe "GET edit" do
            it "assigns the requested field as @mega_instance" do
              field = Field.create! valid_attributes
              get :edit, {use_route: :mega_bar, model_id: 1, :id => field.to_param}, valid_session
              expect(assigns(:mega_instance)).to eq(field)
            end
          end
        end

        context 'with a field model and field fields' do
          before(:each) do
            create(:model, classname: 'fields', name: 'Fields', tablename: 'fields')
            create(:field, tablename: 'fields', field: 'tablename')
            create(:field, tablename: 'fields', field: 'model_id')
            create(:field, tablename: 'fields', field: 'field')
          end
          after(:each) do
            Model.find(1).destroy
            Field.destroy_all
          end
          describe "POST create" do
            describe "with valid params" do
              it "creates a new Field" do
                #  create(:field_for_field_model)
                expect {
                  post :create, {use_route: :mega_bar, model_id: 1, :field=> valid_attributes}, valid_session
                }.to change(Field, :count).by(1)
              end

              it "assigns a newly created field as @mega_instance" do
                post :create, {use_route: :mega_bar, model_id: 1, :field => valid_attributes}, valid_session
                expect(assigns(:mega_instance)).to be_a(Field)
                expect(assigns(:mega_instance)).to be_persisted
              end

              it "redirects to the created field"  do
                post :create, {use_route: :mega_bar, model_id: 1, :field => valid_attributes}, valid_session
                expect(response).to redirect_to(Field.last)
              end
            end

            describe "with invalid params" do
              it "assigns a newly created but unsaved field as @mega_instance" do
                post :create, {use_route: :mega_bar, model_id: 1, :field => invalid_attributes}, valid_session
                expect(assigns(:mega_instance)).to be_a_new(Field)
              end

              it "re-renders the 'new' template" do # , focus: true  do
                post :create, {use_route: :mega_bar, model_id: 1, :field => invalid_attributes}, valid_session
                expect(response).to render_template('mega_bar.html.erb')
              end
            end
          end

          describe "PUT update" do
            describe "with valid params" do
              let(:new_attributes) {
                f = build(:field, tablename: 'fields', field: 'tablename')
                { tablename: 'testing' }
              }
              it "updates the requested field" do
                field = Field.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => field.to_param, :field => new_attributes}, valid_session
                field.reload
                expect(field.attributes).to include( { 'tablename' => 'testing' } )
              end

              it "assigns the requested field as @mega_instance" do

                field = Field.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => field.to_param, :field => valid_attributes}, valid_session
                expect(assigns(:mega_instance)).to eq(field)
              end

              it "redirects to the field" do
                field = Field.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => field.to_param, :field => valid_attributes}, valid_session
                expect(response).to redirect_to(field)
              end
            end

            describe "with invalid params" do
              it "assigns the field as @mega_instance" do
                field = Field.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => field.to_param, :field => invalid_attributes}, valid_session
                expect(assigns(:mega_instance)).to eq(field)
              end

              it "re-renders the 'edit' template" do
                field = Field.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => field.to_param, :field => invalid_attributes}, valid_session
                expect(response).to render_template("mega_bar.html.erb")
              end
            end
          end
        end
        describe "DELETE destroy" do
          it "destroys the requested field" do
            field = Field.create! valid_attributes
            expect {
              delete :destroy, {use_route: :mega_bar, :id => field.to_param}, valid_session
            }.to change(Field, :count).by(-1)
          end

          it "redirects to the fields list" do
            field = Field.create! valid_attributes
            delete :destroy, {use_route: :mega_bar, :id => field.to_param}, valid_session
            puts "url_for('fields')" + url_for('fields').to_s
            expect(response).to redirect_to("/mega-bar/" + url_for('fields'))
          end
        end
      end
    end
  end
end
