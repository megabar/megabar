module MegaBar
  require 'spec_helper'
  # This spec was generated by rspec-rails when you ran the scaffold generator.
  # It demonstrates how one might use RSpec to specify the controller code that
  # was generated by Rails when you ran the scaffold generator.
  #
  # It assumes that the implementation code is generated by the rails scaffold
  # generator.  If you are using any extension libraries to generate different
  # controller code, this generated spec may or may not pass.
  #
  # It only uses APIs available in rails and/or rspec-rails.  There are a number
  # of tools you can use to make these specs even more expressive, but we're
  # sticking to rails and rspec-rails APIs to keep things simple and stable.
  #
  # Compared to earlier versions of this generator, there is very limited use of
  # stubs and message expectations in this spec.  Stubs are only used when there
  # is no simpler way to get a handle on the object needed for the example.
  # Message expectations are only used when there is no simpler way to specify
  # that an instance is receiving a specific message.

  RSpec.describe MegaBar::ModelsController, :type => :controller do

    # This should return the minimal set of attributes required to create a valid
    # Model. As you add validations to Model, be sure to
    # adjust the attributes here as well.
    puts 'whatever'
    let(:valid_session) { {} }
    let(:valid_attributes) {
      m = build(:model)
      { classname: m[:classname], name: m[:name], default_sort_field: m[:default_sort_field], modyule: m[:modyule], id: m[:id]  }
    }

    let(:invalid_attributes) {
      m = build(:model)
      { classname: nil, name: m[:name], default_sort_field: '', id: m[:id]  }
    }
    let(:model) {create(:model_with_page) }
    let(:fields) {
      create(:field_with_displays)
      create(:field_with_displays, field: 'tablename' )
      create(:field_with_displays, field: 'default_sort_field')
    }
    let(:model_display_format) { create(:model_display_format) }
    let(:model_display_format_2) { create(:model_display_format_2) }
    let(:page_info) { {:page_id=>1, :page_path=>"/mega-bar/models", :terms=>["mega-bar", "models"], :vars=>[], :name=>"Models Page"} }
    let(:page_info_for_show) { {:page_id=>1, :page_path=>"/mega-bar/models", :terms=>["mega-bar", "models"], :vars=>["23"], :name=>"Models Page"} }
    let(:rout_for_collection) { {:action=>"index", :controller=>"mega_bar/models"} }
    let(:rout_for_member) { {:action=>"index", :controller=>"mega_bar/models", :id=>"1"} }
    let(:valid_new_model) { {"schema"=>"sqlite", "name"=>"zoiks", "default_sort_field"=>"id", "classname"=>"zoik", "modyule"=>"", "make_page"=>""} }
    let(:invalid_new_model) { {"make_page"=>""} }

    let(:blck) { Block.find(1) }
    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ModelsController. Be sure to keep this updated too.
    context 'with mega_env' do
      before(:each) do
        MegaBar::Field.skip_callback("create",:after,:make_migration)
        MegaBar::Model.skip_callback("create",:after,:make_all_files)
        MegaBar::Model.set_callback("create", :after, :make_page_for_model)
        MegaBar::Page.set_callback("create", :after, :create_layout_for_page)
        MegaBar::Layout.set_callback("create", :after, :create_block_for_layout)
        MegaBar::Layout.set_callback("create", :after, :create_block_for_layout)
        MegaBar::Block.set_callback("create", :after, :make_model_displays)
        model
        fields
        model_display_format
        model_display_format_2
      end
      after(:each) do
        MegaBar::Field.set_callback("create",:after,:make_migration)
        MegaBar::Model.set_callback("create",:after,:make_all_files)
        MegaBar::Model.destroy_all
        MegaBar::Page.destroy_all
        MegaBar::ModelDisplayFormat.destroy_all
      end

      context 'with callbacks disabled ' do
        before(:each) do
          MegaBar::Field.skip_callback("save",:after,:make_field_displays)
          MegaBar::Field.skip_callback("create",:after,:make_field_displays)
          MegaBar::Model.skip_callback("create",:after,:make_page_for_model)
        end
        after(:each) do
          MegaBar::Field.set_callback("save",:after,:make_field_displays)
          MegaBar::Field.set_callback("create",:after,:make_field_displays)
          MegaBar::Model.set_callback("create",:after,:make_page_for_model)

        end

        describe "GET index"  do
          it "assigns all models as @mega_instance" do
            blck
            rout_for_collection
            env = Rack::MockRequest.env_for('/mega-bar/models', :params => rout_for_collection )
            env[:mega_page] = page_info
            env[:mega_env] = MegaEnv.new(blck, rout_for_collection, page_info).to_hash # added to env for use in controllers
            status, headers, body = MegaBar::ModelsController.action(:index).call(env)
            # @response = ActionDispatch::TestResponse.new(status, headers, body)
            @controller = body.request.env['action_controller.instance']
            expect(assigns(:mega_instance)).to eq([model])
          end
        end

        describe "GET show" do
          it "assigns the requested model as @mega_instance" do
            blck
            rout_for_member
            env = Rack::MockRequest.env_for('/mega-bar/models', :params => {"id"=>"1", "action"=>"show", "controller"=>"mega_bar/models"} )
            env[:mega_page] = page_info_for_show
            env[:mega_env] = MegaEnv.new(blck, rout_for_member, page_info_for_show).to_hash # added to env for use in controllers
            status, headers, body = MegaBar::ModelsController.action(:show).call(env)
            # @response = ActionDispatch::TestResponse.new(status, headers, body)
            @controller = body.request.env['action_controller.instance']
            expect(assigns(:mega_instance)).to eq([model])
          end
        end
        describe "GET new" do
          it "assigns a new model as @mega_instance" do
            blck
            rout_for_collection
            env = Rack::MockRequest.env_for('/mega-bar/models', :params => {"action"=>"new", "controller"=>"mega_bar/models"} )
            env[:mega_page] = page_info
            env[:mega_env] = MegaEnv.new(blck, rout_for_collection, page_info).to_hash # added to env for use in controllers
            status, headers, body = MegaBar::ModelsController.action(:new).call(env)
            # @response = ActionDispatch::TestResponse.new(status, headers, body)
            @controller = body.request.env['action_controller.instance']
            expect(assigns(:mega_instance)).to be_a_new(Model)
          end
        end

        describe "GET edit" do
          it "assigns the requested model as @mega_instance" do
            blck
            rout_for_member
            env = Rack::MockRequest.env_for('/mega-bar/models', :params => {"id"=>"1", "action"=>"edit", "controller"=>"mega_bar/models"} )
            env[:mega_page] = page_info_for_show
            env[:mega_env] = MegaEnv.new(blck, rout_for_member, page_info_for_show).to_hash # added to env for use in controllers
            status, headers, body = MegaBar::ModelsController.action(:edit).call(env)
            # @response = ActionDispatch::TestResponse.new(status, headers, body)
            @controller = body.request.env['action_controller.instance']
            expect(assigns(:mega_instance)).to eq(model)
          end
        end

        describe "POST create" do


          describe "with valid params" do
            it "creates a new Model"  do
            blck
            rout_for_collection
            env = Rack::MockRequest.env_for('/mega-bar/models', :params => {"id"=>nil, "action"=>"create", "controller"=>"mega_bar/models", "model"=>valid_new_model })
            env[:mega_page] = page_info
            env[:mega_env] = MegaEnv.new(blck, rout_for_collection, page_info).to_hash # added to env for use in controllers
            expect {
              status, headers, body = MegaBar::ModelsController.action(:create).call(env)
              # @response = ActionDispatch::TestResponse.new(status, headers, body)
              @controller = body.request.env['action_controller.instance']
            }.to change(Model, :count).by(1)
            end

            it "assigns a newly created model as @mega_instance" do
              blck
              rout_for_collection
              env = Rack::MockRequest.env_for('/mega-bar/models', :params => {"id"=>nil, "action"=>"create", "controller"=>"mega_bar/models", "model"=>valid_new_model })
              env[:mega_page] = page_info
              env[:mega_env] = MegaEnv.new(blck, rout_for_collection, page_info).to_hash # added to env for use in controllers
              status, headers, body = MegaBar::ModelsController.action(:create).call(env)
              @controller = body.request.env['action_controller.instance']
              expect(assigns(:mega_instance)).to be_a(Model)
              expect(assigns(:mega_instance)).to be_persisted
            end

            it "redirects to the created model", focus: true  do
              blck
              rout_for_collection
              env = Rack::MockRequest.env_for('/mega-bar/models', :params => {"id"=>nil, "action"=>"create", "controller"=>"mega_bar/models", "model"=>valid_new_model })
              env[:mega_page] = page_info
              env[:mega_env] = MegaEnv.new(blck, rout_for_collection, page_info).to_hash # added to env for use in controllers

              status, headers, body = MegaBar::ModelsController.action(:create).call(env)
              @controller = body.request.env['action_controller.instance']
              expect(status).to be(302)
              expect(body.instance_variable_get(:@body).instance_variable_get(:@header)["Location"]).to include("/mega-bar/models") #almost good enough
            end
          end

          describe "with invalid params" do
            it "assigns a newly created but unsaved model as @mega_instance" do
            #  @controller = body.request.env['action_controller.instance']
              blck
              rout_for_collection
              env = Rack::MockRequest.env_for('/mega-bar/models', :params => {"id"=>nil, "action"=>"create", "controller"=>"mega_bar/models", "model"=>invalid_new_model })
              env[:mega_page] = page_info
              env[:mega_env] = MegaEnv.new(blck, rout_for_collection, page_info).to_hash # added to env for use in controllers
              status, headers, body = MegaBar::ModelsController.action(:create).call(env)
              @controller = body.request.env['action_controller.instance']
              expect(assigns(:mega_instance)).to be_a_new(Model)
            end

            it "re-renders the 'new' template"  do
              blck
              rout_for_collection
              env = Rack::MockRequest.env_for('/mega-bar/models', :params => {"id"=>nil, "action"=>"create", "controller"=>"mega_bar/models", "model"=>invalid_new_model })
              env[:mega_page] = page_info
              env[:mega_env] = MegaEnv.new(blck, rout_for_collection, page_info).to_hash # added to env for use in controllers
              status, headers, body = MegaBar::ModelsController.action(:create).call(env)
              @controller = body.request.env['action_controller.instance']
              expect(response).to render_template('mega_bar.html.erb')
            end
          end
        end



        describe "PUT update" do
          describe "with valid params" do
            let(:new_attributes) {
               m = build(:model)
               { classname: 'testing', name: m[:name], default_sort_field: m[:default_sort_field], id: m[:id]  }
            }

            it "updates the requested model" do
              model = Model.create! valid_attributes
              put :update, {use_route: :mega_bar, :id => model.to_param, :model => new_attributes}, valid_session
              model.reload
              expect(model.attributes).to include( { 'classname' => 'testing' } )
            end

            it "assigns the requested model as @mega_instance" do

              model = Model.create! valid_attributes
              put :update, {use_route: :mega_bar, :id => model.to_param, :model => valid_attributes}, valid_session
              expect(assigns(:mega_instance)).to eq(model)
            end

            it "redirects to the model" do
              model = Model.create! valid_attributes
              put :update, {use_route: :mega_bar, :id => model.to_param, :model => valid_attributes}, valid_session
              expect(response).to redirect_to(model)
            end
          end

          describe "with invalid params" do
            it "assigns the model as @mega_instance" do
              model = Model.create! valid_attributes
              put :update, {use_route: :mega_bar, :id => model.to_param, :model => invalid_attributes}, valid_session
              expect(assigns(:mega_instance)).to eq(model)
            end

            it "re-renders the 'edit' template" do
              model = Model.create! valid_attributes
              put :update, {use_route: :mega_bar, :id => model.to_param, :model => invalid_attributes}, valid_session
              expect(response).to render_template("mega_bar.html.erb")
            end
          end
        end
        describe "DELETE destroy" do
          it "destroys the requested model" do
            model = Model.create! valid_attributes
            expect {
              delete :destroy, {use_route: :mega_bar, :id => model.to_param}, valid_session
            }.to change(Model, :count).by(-1)
          end

          it "redirects to the models list" do
            model = Model.create! valid_attributes
            delete :destroy, {use_route: :mega_bar, :id => model.to_param}, valid_session
            puts "url_for('models')" + url_for('models').to_s
            expect(response).to redirect_to("/mega-bar/" + url_for('models'))
          end
        end
      end
    end
  end
end
