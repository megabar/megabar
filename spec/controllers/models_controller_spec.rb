module MegaBar
  require 'spec_helper'
  # This spec was generated by rspec-rails when you ran the scaffold generator.
  # It demonstrates how one might use RSpec to specify the controller code that
  # was generated by Rails when you ran the scaffold generator.
  #
  # It assumes that the implementation code is generated by the rails scaffold
  # generator.  If you are using any extension libraries to generate different
  # controller code, this generated spec may or may not pass.
  #
  # It only uses APIs available in rails and/or rspec-rails.  There are a number
  # of tools you can use to make these specs even more expressive, but we're
  # sticking to rails and rspec-rails APIs to keep things simple and stable.
  #
  # Compared to earlier versions of this generator, there is very limited use of
  # stubs and message expectations in this spec.  Stubs are only used when there
  # is no simpler way to get a handle on the object needed for the example.
  # Message expectations are only used when there is no simpler way to specify
  # that an instance is receiving a specific message.

  RSpec.describe MegaBar::ModelsController, :type => :controller do

    # This should return the minimal set of attributes required to create a valid
    # Model. As you add validations to Model, be sure to
    # adjust the attributes here as well.
    
    let(:valid_attributes) {
      m = build(:model)
      { classname: m[:classname], name: m[:name], default_sort_field: m[:default_sort_field], modyule: m[:modyule], id: m[:id]  }
    }

    let(:invalid_attributes) {
      m = build(:model)
      { classname: nil, name: m[:name], default_sort_field: '', id: m[:id]  }
    }

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ModelsController. Be sure to keep this updated too.
    let(:valid_session) { {} }
    context 'with mega_env' do 
      before(:each) do 
        byebug
        MegaBar::Field.skip_callback("create",:after,:make_migration)
        MegaBar::Model.skip_callback("create",:after,:make_all_files)
        env = Rack::MockRequest.env_for('/mega-bar/models')
        byebug
        page = create(:model_with_page)
        field1 = create(:field_with_displays)

        env[:mega_env] = 'hello b'
        byebug
        status, headers, body = MegaBar::ModelsController.action(:index).call(env)
       
        #@response = ActionDispatch::TestResponse.new(status, headers, body)
        #@controller = body.request.env['action_controller.instance']
        byebug

        # blck: #<MegaBar::Block id: 1, layout_id: 1, model_id: 1, name: "Models on Models Layout boo", actions: "current", html: "", nest_level_1: nil, nest_level_2: nil, path_base: "", created_at: "2015-02-18 05:20:43", updated_at: "2015-03-02 00:14:20">
        # rout {:action=>"index", :controller=>"mega_bar/models"}
        #page_info {:page_id=>1, :page_path=>"/mega-bar/models", :terms=>["mega-bar", "models"], :vars=>[]}
      end
      after(:each) do
        MegaBar::Field.set_callback("create",:after,:make_migration)
        MegaBar::Model.set_callback("create",:after,:make_all_files)
      end

      context 'with callbacks disabled ' do
        before(:each) do
          MegaBar::Field.skip_callback("save",:after,:make_field_displays) 
          MegaBar::Field.skip_callback("create",:after,:make_field_displays)
          MegaBar::Model.skip_callback("create",:after,:make_model_displays)
          MegaBar::Page.cre
        end
        after(:each) do
          MegaBar::Field.set_callback("save",:after,:make_field_displays) 
          MegaBar::Field.set_callback("create",:after,:make_field_displays)
          MegaBar::Model.set_callback("create",:after,:make_model_displays)
        end

        describe "GET index", focus: true do
          it "assigns all models as @mega_instance" do
            model = Model.create! valid_attributes
            byebug
            get :index, {use_route: :mega_bar, model_id: 1}, valid_session
            expect(assigns(:mega_instance)).to eq([model])
          end
        end

        describe "GET show" do
          it "assigns the requested model as @mega_instance" do
            model =  Model.create! valid_attributes
            get :show, {use_route: :mega_bar, model_id: 1, :id => model.to_param}, valid_session
            expect(assigns(:mega_instance)).to eq([model])
          end
        end
        describe "GET new" do
          it "assigns a new model as @mega_instance" do
            create(:model)
            get :new, {use_route: :mega_bar, model_id: 1}, valid_session
            Model.find(1).destroy
            expect(assigns(:mega_instance)).to be_a_new(Model)
          end
        end

        describe "GET edit" do
          it "assigns the requested model as @mega_instance" do
            model = Model.create! valid_attributes
            get :edit, {use_route: :mega_bar, model_id: 1, :id => model.to_param}, valid_session
            expect(assigns(:mega_instance)).to eq(model)
          end
        end
        context 'with field for model' do
          before(:each) do
            create(:field)
            create(:field, tablename: 'mega_bar_models', field: 'default_sort_field')
          end
          after(:each) do
            Field.destroy_all
          end     
          describe "POST create" do
            describe "with valid params" do
              it "creates a new Model" do
                expect {
                  post :create, {use_route: :mega_bar, model_id: 1, :model => valid_attributes}, valid_session
                }.to change(Model, :count).by(1)
              end

              it "assigns a newly created model as @mega_instance" do
                post :create, {use_route: :mega_bar, model_id: 1, :model => valid_attributes}, valid_session
                expect(assigns(:mega_instance)).to be_a(Model)
                expect(assigns(:mega_instance)).to be_persisted
              end

              it "redirects to the created model"  do
                post :create, {use_route: :mega_bar, model_id: 1, :model => valid_attributes}, valid_session
                expect(response).to redirect_to(Model.last)
              end
            end

            describe "with invalid params" do
              it "assigns a newly created but unsaved model as @mega_instance" do
                post :create, {use_route: :mega_bar, model_id: 1, :model => invalid_attributes}, valid_session
                expect(assigns(:mega_instance)).to be_a_new(Model)
              end

              it "re-renders the 'new' template"  do
                post :create, {use_route: :mega_bar, model_id: 1, :model => invalid_attributes}, valid_session
                expect(response).to render_template('mega_bar.html.erb')
              end
            end
          end



          describe "PUT update" do
            describe "with valid params" do
              let(:new_attributes) {
                 m = build(:model)
                 { classname: 'testing', name: m[:name], default_sort_field: m[:default_sort_field], id: m[:id]  }
              }

              it "updates the requested model" do
                model = Model.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => model.to_param, :model => new_attributes}, valid_session
                model.reload
                expect(model.attributes).to include( { 'classname' => 'testing' } )
              end

              it "assigns the requested model as @mega_instance" do

                model = Model.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => model.to_param, :model => valid_attributes}, valid_session
                expect(assigns(:mega_instance)).to eq(model)
              end

              it "redirects to the model" do
                model = Model.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => model.to_param, :model => valid_attributes}, valid_session
                expect(response).to redirect_to(model)
              end
            end

            describe "with invalid params" do
              it "assigns the model as @mega_instance" do
                model = Model.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => model.to_param, :model => invalid_attributes}, valid_session
                expect(assigns(:mega_instance)).to eq(model)
              end

              it "re-renders the 'edit' template" do
                model = Model.create! valid_attributes
                put :update, {use_route: :mega_bar, :id => model.to_param, :model => invalid_attributes}, valid_session
                expect(response).to render_template("mega_bar.html.erb")
              end
            end
          end
        end
        describe "DELETE destroy" do
          it "destroys the requested model" do
            model = Model.create! valid_attributes
            expect {
              delete :destroy, {use_route: :mega_bar, :id => model.to_param}, valid_session
            }.to change(Model, :count).by(-1)
          end

          it "redirects to the models list" do
            model = Model.create! valid_attributes
            delete :destroy, {use_route: :mega_bar, :id => model.to_param}, valid_session
            puts "url_for('models')" + url_for('models').to_s
            expect(response).to redirect_to("/mega-bar/" + url_for('models'))
          end
        end
      end
    end
  end
end