module MegaBar
  require 'spec_helper'
  # This spec was generated by rspec-rails when you ran the scaffold generator.
  # It demonstrates how one might use RSpec to specify the controller code that
  # was generated by Rails when you ran the scaffold generator.
  #
  # It assumes that the implementation code is generated by the rails scaffold
  # generator.  If you are using any extension libraries to generate different
  # controller code, this generated spec may or may not pass.
  #
  # It only uses APIs available in rails and/or rspec-rails.  There are a number
  # of tools you can use to make these specs even more expressive, but we're
  # sticking to rails and rspec-rails APIs to keep things simple and stable.
  #
  # Compared to earlier versions of this generator, there is very limited use of
  # stubs and message expectations in this spec.  Stubs are only used when there
  # is no simpler way to get a handle on the object needed for the example.
  # Message expectations are only used when there is no simpler way to specify
  # that an instance is receiving a specific message.

  RSpec.describe MegaBar::KillerBeesController, :type => :controller do

    # This should return the minimal set of attributes required to create a valid
    # Model. As you add validations to Model, be sure to
    # adjust the attributes here as well.
    Field.skip_callback("create",:after,:make_migration)
    Model.skip_callback("create",:after,:make_all_files)

    let(:valid_attributes) {
      v = build(:killer_bee)
      { id: v[:id] } # add other fields
    }

    let(:invalid_attributes) {
      # all tests using invalid_attributes marked as pending until you define this.
      i = build(:killer_bee)
      { id: i[:id] } #add other required fields as nil
    }
    #variables:
    # 1 the_model_file_path: app/models/mega_bar/
    # 2 the_model_file_name: killer_bee
    # 3 the_controller_file_name: killer_bees_controller
    # 4 the_controller_file_path: app/controllers/mega_bar/
    # 5 the_controller_spec_file_path: spec/controllers/mega_bar/
    # 6 the_controller_spec_file_name: killer_bees_controller_spec
    # 7 the_factory_file_path: spec/internal/factories/
    # 8 the_file_name: KillerBee
    # 9 the_model_name: KillerBee
    # 10 the_controller_name: KillerBeesController
    # 11 the_table_name: KillerBees
    # 12 the_module_name: MegaBar
    # 13 the_route_name: killer_bees
    # 13 the_route_path: killer-bees

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ModelsController. Be sure to keep this updated too.
    let(:valid_session) { {} }
    context "with a model " do
      before(:each) do
        create(:model, classname: 'KillerBee', name: 'KillerBee', tablename: 'KillerBees')
      end
      after(:each) do
        Model.find(1).destroy
      end
      describe "GET index" do
        it "assigns all KillerBees as @mega_instance" do
          killer_bee = KillerBee.create! valid_attributes
          get :index, {use_route: :mega_bar, model_id: 1}, valid_session
          expect(assigns(:mega_instance)).to eq([killer_bee])
        end
      end

      describe "GET show" do
        it "assigns the requested killer_bee as @mega_instance" do
          killer_bee = KillerBee.create! valid_attributes
          get :show, {use_route: :mega_bar, model_id: 1, :id => killer_bee.to_param}, valid_session
          expect(assigns(:mega_instance)).to eq([killer_bee])
        end
      end
      describe "GET new" do
        it "assigns a new killer_bee as @mega_instance" do
          get :new, {use_route: :mega_bar, model_id: 1}, valid_session
          expect(assigns(:mega_instance)).to be_a_new(KillerBee)
        end
      end

      describe "GET edit" do
        it "assigns the requested killer_bee as @mega_instance" do
          killer_bee = KillerBee.create! valid_attributes
          get :edit, {use_route: :mega_bar, model_id: 1, :id => killer_bee.to_param}, valid_session
          expect(assigns(:mega_instance)).to eq(killer_bee)
        end
      end
    end
    context 'with a model  and fields for killer_bee' do
      before(:each) do
        create(:model, classname: 'KillerBee', name: 'KillerBee', tablename: 'KillerBees')
        create(:field, tablename: 'KillerBees', field: 'id')
        # add additional (required) fields
      end
      after(:each) do
        Model.find(1).destroy
        Field.destroy_all
      end
      describe "POST create" do
        describe "with valid params" do
          it "creates a new killer_bee" do
            expect {
              post :create, {use_route: :mega_bar, model_id: 1, :killer_bee=> valid_attributes}, valid_session
            }.to change(KillerBee, :count).by(1)
          end

          it "assigns a newly created killer_bee as @mega_instance" do
            post :create, {use_route: :mega_bar, model_id: 1, :killer_bee => valid_attributes}, valid_session
            expect(assigns(:mega_instance)).to be_a(KillerBee)
            expect(assigns(:mega_instance)).to be_persisted
          end

          it "redirects to the created killer_bee"  do
            post :create, {use_route: :mega_bar, model_id: 1, :killer_bee => valid_attributes}, valid_session
            expect(response).to redirect_to(KillerBee.last)
          end
        end

        describe "with invalid params" do
          it "assigns a newly created but unsaved killer_bee as @mega_instance" do
            pending #define invalid_attributes above
            post :create, {use_route: :mega_bar, model_id: 1, :killer_bee => invalid_attributes}, valid_session
            expect(assigns(:mega_instance)).to be_a_new(KillerBee)
          end

          it "re-renders the 'new' template"  do
            pending #define invalid_attributes above
            post :create, {use_route: :mega_bar, model_id: 1, :killer_bee => invalid_attributes}, valid_session
            expect(response).to render_template('mega_bar.html.erb')
          end
        end
      end

      describe "PUT update" do
        describe "with valid params" do
          let(:new_attributes) { # marked as pending until params added here.
            md = build(:killer_bee)
            { }
          }

          it "updates the requested killer_bee" do
            pending
            killer_bee = KillerBee.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => killer_bee.to_param, :killer_bee => new_attributes}, valid_session
            killer_bee.reload
            expect(killer_bee.attributes).to include( { 'id' => "5" } )
          end

          it "assigns the requested killer_bee as @mega_instance" do
            killer_bee = KillerBee.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => killer_bee.to_param, :killer_bee => valid_attributes}, valid_session
            expect(assigns(:mega_instance)).to eq(killer_bee)
          end

          it "redirects to the killer_bee" do
            killer_bee = KillerBee.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => killer_bee.to_param, :killer_bee => valid_attributes}, valid_session
            expect(response).to redirect_to(killer_bee)
          end
        end

        describe "with invalid params" do
          it "assigns the killer_bee as @mega_instance" do
              skip('beeep')
              killer_bee = KillerBee.create! valid_attributes
              put :update, {use_route: :mega_bar, :id => killer_bee.to_param, :killer_bee => invalid_attributes}, valid_session
              expect(assigns(:mega_instance)).to eq(killer_bee)
     
          end

          it "re-renders the 'edit' template" do
            #define invalid_attributes above
            skip
            killer_bee = KillerBee.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => killer_bee.to_param, :killer_bee => invalid_attributes}, valid_session
            expect(response).to render_template("mega_bar.html.erb")
          end
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested killer_bee" do
        killer_bee = KillerBee.create! valid_attributes
        expect {
          delete :destroy, {use_route: :mega_bar, :id => killer_bee.to_param}, valid_session
        }.to change(KillerBee, :count).by(-1)
      end

      it "redirects to the killer_bee list" do
        killer_bee = KillerBee.create! valid_attributes
        delete :destroy, {use_route: :mega_bar, :id => killer_bee.to_param}, valid_session
        expect(response).to redirect_to("/mega-bar/killer-bees")
      end
    end

  end  
end