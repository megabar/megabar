module MegaBar
  require 'spec_helper'
  # This spec was generated by rspec-rails when you ran the scaffold generator.
  # It demonstrates how one might use RSpec to specify the controller code that
  # was generated by Rails when you ran the scaffold generator.
  #
  # It assumes that the implementation code is generated by the rails scaffold
  # generator.  If you are using any extension libraries to generate different
  # controller code, this generated spec may or may not pass.
  #
  # It only uses APIs available in rails and/or rspec-rails.  There are a number
  # of tools you can use to make these specs even more expressive, but we're
  # sticking to rails and rspec-rails APIs to keep things simple and stable.
  #
  # Compared to earlier versions of this generator, there is very limited use of
  # stubs and message expectations in this spec.  Stubs are only used when there
  # is no simpler way to get a handle on the object needed for the example.
  # Message expectations are only used when there is no simpler way to specify
  # that an instance is receiving a specific message.

  RSpec.describe module MegaBar::CellosController, :type => :controller do

    # This should return the minimal set of attributes required to create a valid
    # Model. As you add validations to Model, be sure to
    # adjust the attributes here as well.
    MegaBar::Field.skip_callback("create",:after,:make_migration)
    MegaBar::Model.skip_callback("create",:after,:make_all_files)

    #variables:
    # 1 the_model_file_path: app/models/mega_bar/
    # 2 the_model_file_name: cello
    # 3 the_controller_file_name: cellos_controller
    # 4 the_controller_file_path: app/controllers/mega_bar/
    # 5 the_controller_spec_file_path: spec/controllers/mega_bar/
    # 6 the_controller_spec_file_name: cellos_controller_spec
    # 7 the_factory_file_path: spec/internal/factories/
    # 8 the_file_name: cello
    # 9 the_model_name: Cello
    # 10 the_controller_name: CellosController
    # 11 the_table_name: cellos
    # 12 the_module_name: MegaBar
    # 13 the_route_name: cellos
    # 13 the_route_path: the_route_name

    let(:valid_attributes) {
      v = build(:cello)
      { id: v[:id] } # add other fields
    }

    let(:invalid_attributes) {
      # all tests using invalid_attributes marked as pending until you define this.
      i = build(:cello)
      { id: i[:id] } #add other required fields as nil
    }
    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ModelsController. Be sure to keep this updated too.
    let(:valid_session) { {} }
    context "with a model " do
      before(:each) do
        create(:model, classname: 'Cello', name: 'Cello', tablename: 'cellos')
      end
      after(:each) do
        MegaBar::Model.find(1).destroy
      end
      describe "GET index" do
        it "assigns all cellos as @mega_instance" do
          cello = Cello.create! valid_attributes
          get :index, {use_route: :mega_bar,  model_id: 1}, valid_session
          expect(assigns(:mega_instance)).to eq([cello])
        end
      end

      describe "GET show" do
        it "assigns the requested cello as @mega_instance" do
          cello = Cello.create! valid_attributes
          get :show, {use_route: :mega_bar,  model_id: 1, :id => cello.to_param}, valid_session
          expect(assigns(:mega_instance)).to eq([cello])
        end
      end
      describe "GET new" do
        it "assigns a new cello as @mega_instance" do
          get :new, {use_route: :mega_bar,  model_id: 1}, valid_session
          expect(assigns(:mega_instance)).to be_a_new(Cello)
        end
      end

      describe "GET edit" do
        it "assigns the requested cello as @mega_instance" do
          cello = Cello.create! valid_attributes
          get :edit, {use_route: :mega_bar,  model_id: 1, :id => cello.to_param}, valid_session
          expect(assigns(:mega_instance)).to eq(cello)
        end
      end
    end
    context 'with a model  and fields for cello' do
      before(:each) do
        create(:model, classname: 'Cello', name: 'Cello', tablename: 'cellos')
        create(:field, tablename: 'cellos', field: 'id')
        # add additional (required) fields
      end
      after(:each) do
        MegaBar::Model.find(1).destroy
        MegaBar::Field.destroy_all
      end
      describe "POST create" do
        describe "with valid params" do
          it "creates a new cello" do
            expect {
              post :create, {use_route: :mega_bar,  model_id: 1, :cello=> valid_attributes}, valid_session
            }.to change(Cello, :count).by(1)
          end

          it "assigns a newly created cello as @mega_instance" do
            post :create, {use_route: :mega_bar,  model_id: 1, :cello => valid_attributes}, valid_session
            expect(assigns(:mega_instance)).to be_a(Cello)
            expect(assigns(:mega_instance)).to be_persisted
          end

          it "redirects to the created cello"  do
            post :create, {use_route: :mega_bar,  model_id: 1, :cello => valid_attributes}, valid_session
            expect(response).to redirect_to(Cello.last)
          end
        end

        describe "with invalid params" do
          it "assigns a newly created but unsaved cello as @mega_instance" do
            skip('define invalid_attributes above')
            post :create, {use_route: :mega_bar,  model_id: 1, :cello => invalid_attributes}, valid_session
            expect(assigns(:mega_instance)).to be_a_new(Cello)
          end

          it "re-renders the 'new' template"  do
            skip('define invalid_attributes above')
            post :create, {use_route: :mega_bar,  model_id: 1, :cello => invalid_attributes}, valid_session
            expect(response).to render_template('mega_bar.html.erb')
          end
        end
      end

      describe "PUT update" do
        describe "with valid params" do
          let(:new_attributes) { # marked as pending until params added here.
            md = build(:cello)
            { }
          }

          it "updates the requested cello" do
            skip('define new_attributes')
            cello = Cello.create! valid_attributes
            put :update, {use_route: :mega_bar,  :id => cello.to_param, :cello => new_attributes}, valid_session
            cello.reload
            expect(cello.attributes).to include( { 'id' => "5" } )
          end

          it "assigns the requested cello as @mega_instance" do
            cello = Cello.create! valid_attributes
            put :update, {use_route: :mega_bar,  :id => cello.to_param, :cello => valid_attributes}, valid_session
            expect(assigns(:mega_instance)).to eq(cello)
          end

          it "redirects to the cello" do
            cello = Cello.create! valid_attributes
            put :update, {use_route: :mega_bar,  :id => cello.to_param, :cello => valid_attributes}, valid_session
            expect(response).to redirect_to(cello)
          end
        end

        describe "with invalid params" do
          it "assigns the cello as @mega_instance" do
            skip('define invalid_attributes above')
            cello = Cello.create! valid_attributes
            put :update, {use_route: :mega_bar,  :id => cello.to_param, :cello => invalid_attributes}, valid_session
            expect(assigns(:mega_instance)).to eq(cello)
          end

          it "re-renders the 'edit' template" do
            skip('define invalid_attributes above')
            cello = Cello.create! valid_attributes
            put :update, {use_route: :mega_bar,  :id => cello.to_param, :cello => invalid_attributes}, valid_session
            expect(response).to render_template("mega_bar.html.erb")
          end
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested cello" do
        cello = Cello.create! valid_attributes
        expect {
          delete :destroy, {use_route: :mega_bar,  :id => cello.to_param}, valid_session
        }.to change(Cello, :count).by(-1)
      end

      it "redirects to the cello list" do
        cello = Cello.create! valid_attributes
        delete :destroy, {use_route: :mega_bar,  :id => cello.to_param}, valid_session
        expect(response).to redirect_to("/mega-bar/the_route_name")
      end
    end

  end  
end