module MegaBar
  require 'spec_helper'
  # This spec was generated by rspec-rails when you ran the scaffold generator.
  # It demonstrates how one might use RSpec to specify the controller code that
  # was generated by Rails when you ran the scaffold generator.
  #
  # It assumes that the implementation code is generated by the rails scaffold
  # generator.  If you are using any extension libraries to generate different
  # controller code, this generated spec may or may not pass.
  #
  # It only uses APIs available in rails and/or rspec-rails.  There are a number
  # of tools you can use to make these specs even more expressive, but we're
  # sticking to rails and rspec-rails APIs to keep things simple and stable.
  #
  # Compared to earlier versions of this generator, there is very limited use of
  # stubs and message expectations in this spec.  Stubs are only used when there
  # is no simpler way to get a handle on the object needed for the example.
  # Message expectations are only used when there is no simpler way to specify
  # that an instance is receiving a specific message.

  RSpec.describe MegaBar::<%= the_controller_name %>, :type => :controller do

    # This should return the minimal set of attributes required to create a valid
    # Model. As you add validations to Model, be sure to
    # adjust the attributes here as well.
    Field.skip_callback("create",:after,:make_migration)
    Model.skip_callback("create",:after,:make_all_files)

    let(:valid_attributes) {
      f = build(:<%= the_file_name %>)
      { id: f[:id] } # add other fields
    }

    let(:invalid_attributes) {
      f = build(:<%=the_file_name %>)
      { id: nil } #add other required fields as nil
    }
    
1<%= the_model_file_name %>
2<%= the_controller_file_name %>
3<%= the_controller_spec_file_name %>
4<%= the_file_name %>
5<%= the_model_name %>
6<%= the_controller_name %>
7<%= the_table_name %>
8<%= the_module_name %>
9<%= the_route_name %>

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ModelsController. Be sure to keep this updated too.
    let(:valid_session) { {} }
    context "with a model " do
      before(:each) do
        create(:model, classname: '<%= the_file_name %>', name: '<%= the_model_name %>', tablename: '<%= the_table_name %>')
      end
      after(:each) do
        Model.find(1).destroy
      end
      describe "GET index" do
        it "assigns all <%= the_table_name %> as @mega_instance" do
          <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
          get :index, {use_route: :mega_bar, model_id: 1}, valid_session
          expect(assigns(:mega_instance)).to eq([<%= the_file_name %>])
        end
      end

      describe "GET show" do
        it "assigns the requested <%= the_file_name %> as @mega_instance" do
          <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
          get :show, {use_route: :mega_bar, model_id: 1, :id => <%= the_file_name %>.to_param}, valid_session
          expect(assigns(:mega_instance)).to eq([<%= the_file_name %>])
        end
      end
      describe "GET new" do
        it "assigns a new <%= the_file_name %> as @mega_instance" do
          get :new, {use_route: :mega_bar, model_id: 1}, valid_session
          expect(assigns(:mega_instance)).to be_a_new(<%= the_model_name %>)
        end
      end

      describe "GET edit" do
        it "assigns the requested <%= the_file_name %> as @mega_instance" do
          <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
          get :edit, {use_route: :mega_bar, model_id: 1, :id => <%= the_file_name %>.to_param}, valid_session
          expect(assigns(:mega_instance)).to eq(<%= the_file_name %>)
        end
      end
    end
    context 'with a model, a record format and fields for selects' do
      before(:each) do
        create(:model, classname: 'select', name: 'Selects', tablename: 'selects')
        create(:field, tablename: 'selects', field: 'field_display_id')
        create(:field, tablename: 'selects', field: 'truncation')
      end
      after(:each) do
        Model.find(1).destroy
        Field.destroy_all
      end
      describe "POST create" do
        describe "with valid params" do
          it "creates a new <%= the_file_name %>" do
            expect {
              post :create, {use_route: :mega_bar, model_id: 1, :<%= the_file_name %>=> valid_attributes}, valid_session
            }.to change(<%= the_model_name %>, :count).by(1)
          end

          it "assigns a newly created <%= the_file_name %> as @mega_instance" do
            post :create, {use_route: :mega_bar, model_id: 1, :<%= the_file_name %> => valid_attributes}, valid_session
            expect(assigns(:mega_instance)).to be_a(<%= the_model_name %>)
            expect(assigns(:mega_instance)).to be_persisted
          end

          it "redirects to the created <%= the_file_name %>"  do
            post :create, {use_route: :mega_bar, model_id: 1, :<%= the_file_name %> => valid_attributes}, valid_session
            expect(response).to redirect_to(<%= the_model_name %>.last)
          end
        end

        describe "with invalid params" do
          it "assigns a newly created but unsaved <%= the_file_name %> as @mega_instance" do
            post :create, {use_route: :mega_bar, model_id: 1, :<%= the_file_name %> => invalid_attributes}, valid_session
            expect(assigns(:mega_instance)).to be_a_new(<%= the_model_name %>)
          end

          it "re-renders the 'new' template"  do
            post :create, {use_route: :mega_bar, model_id: 1, :<%= the_file_name %> => invalid_attributes}, valid_session
            expect(response).to render_template('mega_bar.html.erb')
          end
        end
      end

      describe "PUT update" do
        describe "with valid params" do
          let(:new_attributes) {
            md = build(:<%= the_file_name %>)
            { id: "5" }
          }

          it "updates the requested <%= the_file_name %>" do
            <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => <%= the_file_name %>.to_param, :<%= the_file_name %> => new_attributes}, valid_session
            <%= the_file_name %>.reload
            expect(<%= the_file_name %>.attributes).to include( { 'id' => "5" } )
          end

          it "assigns the requested <%= the_file_name %> as @mega_instance" do
            <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => <%= the_file_name %>.to_param, :<%= the_file_name %> => valid_attributes}, valid_session
            expect(assigns(:mega_instance)).to eq(<%= the_file_name %>)
          end

          it "redirects to the <%= the_file_name %>" do
            <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => <%= the_file_name %>.to_param, :<%= the_file_name %> => valid_attributes}, valid_session
            expect(response).to redirect_to(<%= the_file_name %>)
          end
        end

        describe "with invalid params" do
          it "assigns the <%= the_file_name %> as @mega_instance" do
            <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => <%= the_file_name %>.to_param, :<%= the_file_name %> => invalid_attributes}, valid_session
            expect(assigns(:mega_instance)).to eq(<%= the_file_name %>)
          end

          it "re-renders the 'edit' template" do
            <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
            put :update, {use_route: :mega_bar, :id => <%= the_file_name %>.to_param, :<%= the_file_name %> => invalid_attributes}, valid_session
            expect(response).to render_template("mega_bar.html.erb")
          end
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested <%= the_file_name %>" do
        <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
        expect {
          delete :destroy, {use_route: :mega_bar, :id => <%= the_file_name %>.to_param}, valid_session
        }.to change(<%= the_model_name %>, :count).by(-1)
      end

      it "redirects to the <%= the_file_name %> list" do
        <%= the_file_name %> = <%= the_model_name %>.create! valid_attributes
        delete :destroy, {use_route: :mega_bar, :id => <%= the_file_name %>.to_param}, valid_session
        expect(response).to redirect_to("/mega-bar/<%= the_file_name %>")
      end
    end

  end
end